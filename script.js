// –ê–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–∏—Å–∞.
// –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, —ç—Ç–æ –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞ Render (–∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π, –µ—Å–ª–∏ –≤—ã –µ–≥–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ).
const BACKEND_URL = 'https://learnback-twta.onrender.com'; // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø—É—â–µ–Ω –≤–∞—à Express-—Å–µ—Ä–≤–µ—Ä

// ------------------------------------------
// I. –≠–ª–µ–º–µ–Ω—Ç—ã DOM
// ------------------------------------------
const createTokenBtn = document.getElementById('create-token-btn');
const tokenSupplyInput = document.getElementById('token-supply');
const tokenDecimalsInput = document.getElementById('token-decimals');
const createStatusMessage = document.getElementById('create-status-message');
const resultLinkDiv = document.getElementById('result-link');
// ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –ú–ï–¢–ê–î–ê–ù–ù–´–•
const tokenNameInput = document.getElementById('token-name');
const tokenSymbolInput = document.getElementById('token-symbol');
const tokenUriInput = document.getElementById('token-uri');

const serviceWalletAddressEl = document.getElementById('service-wallet-address');
const serviceBalanceDisplay = document.getElementById('service-balance-display');
const serviceTokenList = document.getElementById('service-token-list');
const refreshBtn = document.getElementById('refresh-btn');
const loadingStatus = document.getElementById('loading-status');

// ------------------------------------------
// II. –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
// ------------------------------------------

function updateStatus(element, message, type) {
    element.textContent = message;
    element.className = `status-message ${type}`;
}

// ------------------------------------------
// III. –õ–æ–≥–∏–∫–∞ –°–æ–∑–¥–∞–Ω–∏—è –¢–æ–∫–µ–Ω–∞ (POST /api/create-token)
// ------------------------------------------

async function handleCreateToken() {
    // ‚úÖ –°—á–∏—Ç—ã–≤–∞–µ–º –í–°–ï 5 –ø–æ–ª–µ–π
    const name = tokenNameInput.value;
    const symbol = tokenSymbolInput.value;
    const uri = tokenUriInput.value;
    const supply = tokenSupplyInput.value;
    const decimals = tokenDecimalsInput.value;

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (!name || !symbol || !uri) {
        updateStatus(createStatusMessage, '‚ùó –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–ò–º—è, –°–∏–º–≤–æ–ª, URI).', 'error');
        return;
    }
    if (!supply || parseInt(supply) <= 0) {
        updateStatus(createStatusMessage, '‚ùó –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (Supply).', 'error');
        return;
    }
    
    updateStatus(createStatusMessage, '–°–æ–∑–¥–∞–Ω–∏–µ –∏ –º–∏–Ω—Ç —Ç–æ–∫–µ–Ω–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...', 'loading');
    createTokenBtn.disabled = true;
    resultLinkDiv.innerHTML = '';

    try {
        const response = await fetch(`${BACKEND_URL}/api/create-token`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: name,
                symbol: symbol,
                uri: uri,
                supply: supply,
                decimals: decimals
            })
        });

        const data = await response.json();

        if (response.ok) {
            updateStatus(createStatusMessage, `‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω! Mint: ${data.mintAddress.slice(0, 6)}...`, 'success');
            
            // –í—ã–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ Solscan
            resultLinkDiv.innerHTML = `
                <a href="${data.solscan}" target="_blank" style="color: var(--link-color); text-decoration: none;">
                    üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ Solscan
                </a>
            `;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
            await fetchServiceWalletInfo(); 
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        updateStatus(createStatusMessage, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        createTokenBtn.disabled = false;
    }
}

// ------------------------------------------
// IV. –õ–æ–≥–∏–∫–∞ –ü–æ–ª—É—á–µ–Ω–∏—è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (GET /api/balance)
// ------------------------------------------

async function fetchServiceWalletInfo() {
    loadingStatus.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...';
    refreshBtn.disabled = true;

    try {
        const response = await fetch(`${BACKEND_URL}/api/balance`);
        
        // ‚ùå –ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–û–ö –ë–≠–ö–ï–ù–î–ê: –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 200, —á–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ –æ—à–∏–±–∫—É
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || `–û—à–∏–±–∫–∞ ${response.status} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.`);
        }

        const data = await response.json();
        
        // 1. –ê–¥—Ä–µ—Å
        const address = data.serviceAddress || '–ê–¥—Ä–µ—Å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'; 
        serviceWalletAddressEl.textContent = `–ê–¥—Ä–µ—Å: ${typeof address === 'string' && address.length > 8 ? address.slice(0, 4) + '...' + address.slice(-4) : address}`;

        // 2. –ë–∞–ª–∞–Ω—Å SOL
        if (typeof data.sol === 'number') {
            serviceBalanceDisplay.textContent = `–ë–∞–ª–∞–Ω—Å SOL: ${data.sol.toFixed(4)} SOL`; 
        } else {
            serviceBalanceDisplay.textContent = `–ë–∞–ª–∞–Ω—Å SOL: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏`; 
        }

        // 3. –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥)
        serviceTokenList.innerHTML = '';
        const tokens = data.tokens || data.splTokens || [];
        if (tokens.length > 0) {
            tokens.forEach(token => {
                const listItem = document.createElement('li');
                listItem.innerHTML = `
                    <span><strong>Mint:</strong> ${token.mint}</span>
                    <span><strong>Amount:</strong> ${token.amount}</span>
                    <span><strong>Decimals:</strong> ${token.decimals}</span>
                    ${token.symbol ? `<span><strong>Symbol:</strong> ${token.symbol}</span>` : ""}
                `;
                serviceTokenList.appendChild(listItem);
            });
        } else {
            serviceTokenList.innerHTML = '<li>–¢–æ–∫–µ–Ω—ã SPL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</li>';
        }
        
        loadingStatus.textContent = '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.';

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        const errorMessage = error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
        loadingStatus.textContent = `‚ùå –û—à–∏–±–∫–∞: ${errorMessage.slice(0, 50)}...`;
        serviceWalletAddressEl.textContent = '–ê–¥—Ä–µ—Å: –û—à–∏–±–∫–∞';
        serviceBalanceDisplay.textContent = '–ë–∞–ª–∞–Ω—Å SOL: –û—à–∏–±–∫–∞';
        serviceTokenList.innerHTML = '<li>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤.</li>';
    } finally {
        refreshBtn.disabled = false;
    }
}

// ------------------------------------------
// V. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
// ------------------------------------------

document.addEventListener('DOMContentLoaded', fetchServiceWalletInfo);
createTokenBtn.addEventListener('click', handleCreateToken);
refreshBtn.addEventListener('click', fetchServiceWalletInfo);
