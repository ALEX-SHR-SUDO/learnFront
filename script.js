document.addEventListener("DOMContentLoaded", () => {
  console.log("JS –∑–∞–≥—Ä—É–∂–µ–Ω");

  const API = "https://learnback-twta.onrender.com"; // –∏–ª–∏ —Å–≤–æ–π backend URL

  const chatBox = document.getElementById("chatBox");
  const sendBtn = document.getElementById("sendBtn");
  const airdropBtn = document.getElementById("airdropBtn");
  const balanceBtn = document.getElementById("balanceBtn");
  const balanceOut = document.getElementById("balance");

  const inputs = {
    name: document.getElementById("nameInput"),
    symbol: document.getElementById("symbolInput"),
    decimals: document.getElementById("decimalsInput"),
    supply: document.getElementById("supplyInput"),
    description: document.getElementById("descriptionInput")
  };

  if (!chatBox || !sendBtn) {
    console.error("–≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
    return;
  }

  function addMessage(text, type = "server") {
    const msg = document.createElement("div");
    msg.classList.add("message", type);
    msg.innerText = text;
    chatBox.appendChild(msg);
    chatBox.scrollTop = chatBox.scrollHeight;
  }

  // === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ ===
  sendBtn.addEventListener("click", async () => {
    const payload = {
      name: inputs.name.value.trim(),
      symbol: inputs.symbol.value.trim(),
      decimals: inputs.decimals.value.trim(),
      supply: inputs.supply.value.trim(),
      description: inputs.description.value.trim()
    };

    addMessage(JSON.stringify(payload), "user");

    try {
      const res = await fetch(`${API}/chat`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      });

      const data = await res.json();

      Object.values(data).forEach(replyLine => addMessage(replyLine, "server"));
    } catch (err) {
      console.error(err);
      addMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É", "server");
    }
  });

  // === Airdrop ===
  airdropBtn.addEventListener("click", async () => {
    addMessage("üí∏ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é airdrop...", "user");
    try {
      const res = await fetch(`${API}/airdrop`, { method: "POST" });
      const data = await res.json();
      addMessage(data.message || "Airdrop –≤—ã–ø–æ–ª–Ω–µ–Ω!", "server");
    } catch (err) {
      console.error(err);
      addMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ airdrop.", "server");
    }
  });

  // === –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ ===
  balanceBtn.addEventListener("click", async () => {
    addMessage("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...", "user");
    balanceOut.innerText = "‚è≥ ...";
    try {
      const res = await fetch(`${API}/balance`);
      const data = await res.json();
      const sol = data.balance ?? 0;
      addMessage(`–ë–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ${sol} SOL`, "server");
      balanceOut.innerText = `${sol} SOL`;
    } catch (err) {
      console.error(err);
      balanceOut.innerText = "‚ùå –û—à–∏–±–∫–∞";
      addMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞.", "server");
    }
  });
});
