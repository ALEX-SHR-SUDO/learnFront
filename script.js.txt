const BACKEND_URL = 'https://learnback-twta.onrender.com';

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const createTokenBtn = document.getElementById('create-token-btn');
const tokenSupplyInput = document.getElementById('token-supply');
const tokenDecimalsInput = document.getElementById('token-decimals');
const createStatusMessage = document.getElementById('create-status-message');
const resultLinkDiv = document.getElementById('result-link');
const tokenNameInput = document.getElementById('token-name');
const tokenSymbolInput = document.getElementById('token-symbol');
const tokenUriInput = document.getElementById('token-uri');
const tokenDescriptionInput = document.getElementById('token-description');

const serviceWalletAddressEl = document.getElementById('service-wallet-address');
const serviceBalanceDisplay = document.getElementById('service-balance-display');
const serviceTokenList = document.getElementById('service-token-list');
const refreshBtn = document.getElementById('refresh-btn');
const loadingStatus = document.getElementById('loading-status');

// –≠–ª–µ–º–µ–Ω—Ç—ã upload –ª–æ–≥–æ—Ç–∏–ø–∞
const uploadLogoForm = document.getElementById('upload-logo-form') || document.getElementById('create-token-form');
const logoFileInput = document.getElementById('logo-file');
const logoUploadStatus = document.getElementById('logo-upload-status');
const logoPreview = document.getElementById('logo-preview');
const logoUploadBlock = document.getElementById('logo-upload-block');

// Drag&Drop –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
['dragenter', 'dragover'].forEach(eventName => {
  logoUploadBlock.addEventListener(eventName, (e) => {
    e.preventDefault();
    e.stopPropagation();
    logoUploadBlock.classList.add('dragover');
  });
});
['dragleave', 'drop'].forEach(eventName => {
  logoUploadBlock.addEventListener(eventName, (e) => {
    e.preventDefault();
    e.stopPropagation();
    logoUploadBlock.classList.remove('dragover');
  });
});
logoUploadBlock.addEventListener('drop', async (e) => {
  e.preventDefault();
  logoUploadBlock.classList.remove('dragover');
  const files = e.dataTransfer.files;
  if (files && files[0]) {
    logoFileInput.files = files;
    await handleLogoUpload(files[0]);
  }
});
logoUploadBlock.addEventListener('click', () => logoFileInput.click());
logoFileInput.addEventListener('change', async () => {
  if (logoFileInput.files && logoFileInput.files[0]) {
    await handleLogoUpload(logoFileInput.files[0]);
  }
});

// ===== –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –Ω–∞ Pinata —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ URI =====
async function handleLogoUpload(file) {
  if (!file) {
    logoUploadStatus.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª!';
    logoUploadStatus.className = 'status-message error';
    logoPreview.src = "default-logo.svg";
    logoPreview.style.display = "block";
    return;
  }
  logoUploadStatus.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞...';
  logoUploadStatus.className = 'status-message loading';

  const formData = new FormData();
  formData.append('file', file);

  try {
    const res = await fetch(`${BACKEND_URL}/api/upload-logo`, {
      method: 'POST',
      body: formData
    });

    if (!res.ok) {
      let data = {};
      try { data = await res.json(); } catch {}
      logoUploadStatus.textContent = `‚ùå –û—à–∏–±–∫–∞: ${data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø.'}`;
      logoUploadStatus.className = 'status-message error';
      logoPreview.src = "default-logo.svg";
      logoPreview.style.display = "block";
      return;
    }

    const data = await res.json();
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏—á–Ω—ã–π gateway
    const ipfsUrl = data.ipfsUrl.replace(/https:\/\/[^\/]+\/ipfs\//, "https://gateway.pinata.cloud/ipfs/");
    if (typeof ipfsUrl === 'string' && /^https?:\/\/.+\/ipfs\/.+$/.test(ipfsUrl)) {
      logoUploadStatus.textContent = `‚úÖ –õ–æ–≥–æ—Ç–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω!`;
      logoUploadStatus.className = 'status-message success';
      logoPreview.src = ipfsUrl;
      logoPreview.style.display = "block";
      window.tokenLogoIpfsUrl = ipfsUrl;
      await uploadMetadataToPinata(ipfsUrl);
    } else {
      logoUploadStatus.textContent = `‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ª–æ–≥–æ—Ç–∏–ø.`;
      logoUploadStatus.className = 'status-message error';
      logoPreview.src = "default-logo.svg";
      logoPreview.style.display = "block";
    }
  } catch (err) {
    logoUploadStatus.textContent = `‚ùå –û—à–∏–±–∫–∞: ${err.message}`;
    logoUploadStatus.className = 'status-message error';
    logoPreview.src = "default-logo.svg";
    logoPreview.style.display = "block";
  }
}

// ===== –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞—Ç—ã JSON –Ω–∞ Pinata =====
async function uploadMetadataToPinata(ipfsLogoUrl) {
  const name = tokenNameInput.value || "Token";
  const symbol = tokenSymbolInput.value || "TKN";
  const description = tokenDescriptionInput ? tokenDescriptionInput.value : "";
  const safeIpfsLogoUrl = ipfsLogoUrl.replace(/https:\/\/[^\/]+\/ipfs\//, "https://gateway.pinata.cloud/ipfs/");
  const metadata = {
    name: name,
    symbol: symbol,
    image: safeIpfsLogoUrl,
    description: description,
    attributes: []
  };

  const jsonBlob = new Blob([JSON.stringify(metadata)], { type: "application/json" });
  const formData = new FormData();
  formData.append('file', jsonBlob, 'metadata.json');

  try {
    const res = await fetch(`${BACKEND_URL}/api/upload-logo`, {
      method: 'POST',
      body: formData
    });
    const data = await res.json();
    if (res.ok && typeof data.ipfsUrl === "string") {
      tokenUriInput.value = data.ipfsUrl.replace(/https:\/\/[^\/]+\/ipfs\//, "https://gateway.pinata.cloud/ipfs/");
      logoUploadStatus.textContent += '\n‚úÖ –ú–µ—Ç–∞–¥–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!';
      logoUploadStatus.className = 'status-message success';
    } else {
      logoUploadStatus.textContent = `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞—Ç—ã: ${data.error || '–ù–µ—Ç —Å—Å—ã–ª–∫–∏'}`;
      logoUploadStatus.className = 'status-message error';
    }
  } catch (err) {
    logoUploadStatus.textContent = `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞—Ç—ã: ${err.message}`;
    logoUploadStatus.className = 'status-message error';
  }
}

// ===== –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Solana =====
document.getElementById('create-token-form').addEventListener('submit', async function(e) {
  e.preventDefault();
  const name = tokenNameInput.value;
  const symbol = tokenSymbolInput.value;
  const supply = tokenSupplyInput.value;
  const decimals = tokenDecimalsInput.value;
  const uri = tokenUriInput.value;
  createStatusMessage.textContent = '';
  resultLinkDiv.innerHTML = '';

  if (!name || !symbol || !uri) {
    createStatusMessage.textContent = '‚ùó –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–ò–º—è, –°–∏–º–≤–æ–ª, URI).';
    createStatusMessage.className = 'status-message error';
    return;
  }
  if (!supply || parseInt(supply) <= 0) {
    createStatusMessage.textContent = '‚ùó –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (Supply).';
    createStatusMessage.className = 'status-message error';
    return;
  }

  createStatusMessage.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ –∏ –º–∏–Ω—Ç —Ç–æ–∫–µ–Ω–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...';
  createStatusMessage.className = 'status-message loading';
  createTokenBtn.disabled = true;

  try {
    const res = await fetch(`${BACKEND_URL}/api/create-token`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name, symbol, supply, decimals, uri })
    });
    const data = await res.json();
    if (res.ok) {
      createStatusMessage.textContent = `‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω! Mint: ${data.mintAddress.slice(0, 6)}...`;
      createStatusMessage.className = 'status-message success';
      resultLinkDiv.innerHTML = `
        <a href="https://solscan.io/token/${data.mintAddress}?cluster=devnet" target="_blank" style="color: var(--link-color); text-decoration: none;">
          üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ Solscan
        </a>
      `;
      await fetchServiceWalletInfo();
    } else {
      throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.');
    }
  } catch (error) {
    createStatusMessage.textContent = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
    createStatusMessage.className = 'status-message error';
  } finally {
    createTokenBtn.disabled = false;
  }
});

// ===== –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ =====
async function fetchServiceWalletInfo() {
  loadingStatus.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...';
  refreshBtn.disabled = true;

  try {
    const response = await fetch(`${BACKEND_URL}/api/balance`);
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || `–û—à–∏–±–∫–∞ ${response.status} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.`);
    }
    const data = await response.json();
    const address = data.serviceAddress || '–ê–¥—Ä–µ—Å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω';
    serviceWalletAddressEl.textContent = `–ê–¥—Ä–µ—Å: ${typeof address === 'string' && address.length > 8 ? address.slice(0, 4) + '...' + address.slice(-4) : address}`;
    if (typeof data.sol === 'number') {
      serviceBalanceDisplay.textContent = `–ë–∞–ª–∞–Ω—Å SOL: ${data.sol.toFixed(4)} SOL`;
    } else {
      serviceBalanceDisplay.textContent = `–ë–∞–ª–∞–Ω—Å SOL: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏`;
    }
    serviceTokenList.innerHTML = '';
    const tokens = data.tokens || data.splTokens || [];
    if (tokens.length > 0) {
      tokens.forEach(token => {
        const listItem = document.createElement('li');
        listItem.innerHTML = `
          <span><strong>Mint:</strong> ${token.mint}</span>
          <span><strong>Amount:</strong> ${token.amount}</span>
          <span><strong>Decimals:</strong> ${token.decimals}</span>
          ${token.symbol ? `<span><strong>Symbol:</strong> ${token.symbol}</span>` : ""}
        `;
        serviceTokenList.appendChild(listItem);
      });
    } else {
      serviceTokenList.innerHTML = '<li>–¢–æ–∫–µ–Ω—ã SPL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</li>';
    }
    loadingStatus.textContent = '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.';
  } catch (error) {
    loadingStatus.textContent = `‚ùå –û—à–∏–±–∫–∞: ${(error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è').slice(0, 50)}...`;
    serviceWalletAddressEl.textContent = '–ê–¥—Ä–µ—Å: –û—à–∏–±–∫–∞';
    serviceBalanceDisplay.textContent = '–ë–∞–ª–∞–Ω—Å SOL: –û—à–∏–±–∫–∞';
    serviceTokenList.innerHTML = '<li>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤.</li>';
  } finally {
    refreshBtn.disabled = false;
  }
}

document.addEventListener('DOMContentLoaded', fetchServiceWalletInfo);
refreshBtn.addEventListener('click', fetchServiceWalletInfo);
